<?xml version="1.0" encoding="UTF-8"?>
<!--
	Application context definition for vap on JPA.
-->
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		xmlns:p="http://www.springframework.org/schema/p" xmlns:aop="http://www.springframework.org/schema/aop"
		xmlns:context="http://www.springframework.org/schema/context" xmlns:jee="http://www.springframework.org/schema/jee"
		xmlns:tx="http://www.springframework.org/schema/tx"
		xsi:schemaLocation="
			http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.1.xsd
			http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
			http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd
			http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-4.1.xsd
			http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.1.xsd">

	<!-- ========================= RESOURCE DEFINITIONS ========================= -->

	

	<!-- Configurer that replaces ${...} placeholders with values from a properties file -->
	<!-- (in this case, JDBC-related settings for the dataSource definition below) -->
	
	<!--
		C3P0 for connection pooling. 
	-->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"	destroy-method="close"
		p:driverClass="${JDBC_DRIVER_CLASS_NAME}" 
		p:jdbcUrl="jdbc:mysql://${JDBC_HOST}:${JDBC_PORT}/${JDBC_SCHEMA}${JDBC_CONNECTION_PROPERTIES}" 
		p:user="${JDBC_USER_NAME}" 
		p:password="${JDBC_PASSWORD}" 
		p:minPoolSize="${C3P0_MIN_POOL_SIZE}" 
		p:maxPoolSize="${C3P0_MAX_POOL_SIZE}" 
		p:maxStatements="${C3P0_MAX_STATEMENTS}" 
		p:maxIdleTime="${C3P0_MAX_IDLE_TIME}" 
		p:maxIdleTimeExcessConnections="${C3P0_MAX_IDLE_TIME_EXCESS_CONNECTIONS}" 
		p:acquireRetryAttempts="${C3P0_ACQUIRE_RETRY_ATTEMPTS}" 
		p:acquireRetryDelay="${C3P0_ACQUIRE_RETRY_DELAY}" />


	<!-- JPA EntityManagerFactory -->
	<bean id="entityManagerFactory"
		class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean"
		p:dataSource-ref="dataSource">
		<property name="jpaVendorAdapter">
			<bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter"
				p:database="${HIBERNATE_DATABASE}" p:showSql="${HIBERNATE_SHOW_SQL}" p:generateDdl="${HIBERNATE_GENERATE_DDL}"/>
		</property>
		<property name="jpaPropertyMap">
			<map>
				<entry key="hibernate.ejb.naming_strategy" value="org.hibernate.cfg.ImprovedNamingStrategy" />
			</map>
		</property>
	</bean>

	<!-- Transaction manager for a single JPA EntityManagerFactory (alternative to JTA) -->
	<bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager"
			p:entityManagerFactory-ref="entityManagerFactory"/>


	<!--
		Instruct Spring to perform declarative transaction management
		automatically on annotated classes.
	-->
	<tx:annotation-driven />

	<!--
		Post-processor to perform exception translation on @Repository classes (from native
		exceptions such as JPA PersistenceExceptions to Spring's DataAccessException hierarchy).
	-->
	<bean class="org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor"/>
</beans>
